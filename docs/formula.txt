Formula for "Необходимо отправить {cluster_name}"

  1. Input Parameters:

  - FBO_STOCK_SUPPLY_DAYS = 28 (days of stock to maintain)
  - FBO_SAFETY_STOCK_DAYS = 5 (safety buffer days)
  - delivery_days_fbo - cluster-specific delivery days:
    - Москва, МО и Дальние регионы: 10 days
    - Санкт-Петербург и СЗО: 7 days
    - Урал: 10 days
    - Дальний Восток: 30 days
    - Казань: 15 days, etc.

  2. Key Calculations:

  Daily Sales Rate:

  daily_sales = order_count / DAYS_COVERED if order_count > 1 else 0.0

  Order Point (Reorder Level):

  order_point = math.ceil(daily_sales * (delivery_days_fbo + FBO_SAFETY_STOCK_DAYS))

  Decision Logic:

  if (stock_amount + in_transit_amount) <= order_point:
      # Need to send stock
      remaining_stock_fbo = max(0, stock_amount - delivery_days_fbo * daily_sales)
      required_stock_fbo = FBO_STOCK_SUPPLY_DAYS * daily_sales - in_transit_amount
      fbo_supply_order_original = round(required_stock_fbo - remaining_stock_fbo)
      fbo_supply_order = min(current_stock_vrn, fbo_supply_order_original)
  else:
      # No shipment needed
      fbo_supply_order = 0

  Package Adjustment:

  if pack_count > 20 and (fbo_supply_order < 0.5 * pack_count):
      # Skip adjustment for large packs with small orders
      pass
  else:
      fbo_supply_order = round_to_multiple(fbo_supply_order, pack_count, current_stock_vrn)

  3. Formula Breakdown:

  Step 1: Check if restocking is needed
  - If (current_stock + in_transit) ≤ order_point → YES, send stock

  Step 2: Calculate how much to send
  - remaining_stock_after_delivery = max(0, current_stock - delivery_days × daily_sales)
  - target_stock = 28_days × daily_sales
  - need_to_send = target_stock - in_transit - remaining_stock_after_delivery
  - actual_send = min(warehouse_stock, need_to_send)

  Step 3: Round to package multiples
  - Adjust quantity to match packaging requirements

  4. Business Logic:

  This formula ensures 28 days of stock coverage at each cluster while:
  - Accounting for delivery time to each cluster
  - Maintaining 5-day safety buffer
  - Not exceeding available warehouse stock
  - Respecting product packaging constraints

  The goal is to prevent stockouts while optimizing inventory distribution across Ozon's fulfillment network.





  The in_transit_amount is calculated using a multi-step process that calls several Ozon API methods:

  API Methods Used:

  1. POST /v2/supply-order/list

  File: common/ozon_api_client.py:159
  - Gets list of supply order IDs
  - Filters by states: ORDER_STATE_DATA_FILLING, ORDER_STATE_READY_TO_SUPPLY, ORDER_STATE_ACCEPTED_AT_SUPPLY_WAREHOUSE, ORDER_STATE_IN_TRANSIT,
  ORDER_STATE_ACCEPTANCE_AT_STORAGE_WAREHOUSE

  2. POST /v2/supply-order/get

  File: common/ozon_api_client.py:192
  - Gets detailed info for supply orders (batches of 50)
  - Returns orders with their supplies and warehouse info

  3. POST /v1/supply-order/bundle

  File: common/ozon_api_client.py:230
  - Gets individual items within each supply bundle
  - Returns offer_id and quantity for each product

  Process Flow:

  1. Get all active supply orders (pagination with 100 limit)
  2. Process orders in batches of 50 to get detailed info
  3. For each supply in each order:
    - Get storage_warehouse_id and bundle_id
    - Map warehouse to cluster using get_warehouse_to_cluster_map()
  4. For each bundle, paginate through items (50 limit) to get:
    - offer_id → convert to product_code
    - quantity → add to cluster totals